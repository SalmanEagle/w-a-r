- BREAKTHROUGH.
+ Drop all local commits:

https://stackoverflow.com/questions/5097456/throw-away-local-commits-in-git#:~:text=21%20Answers&text=If%20your%20excess%20commits%20are,will%20discard%20all%20local%20changes.

/If your excess commits are only visible to you, you can just do 
git reset --hard origin/<branch_name> 
to move back to where the origin is. This will reset the state of the repository to the previous commit, and it will discard all local changes./


- "git checkout <commithash>" will take you back to the state of a previous commit:
https://stackoverflow.com/questions/4114095/how-do-i-revert-a-git-repository-to-a-previous-commit

You will get this familiar message:

https://github.com/francopestilli/life/wiki/Switch-to-a-previous-state-of-the-repository
/You are in 'detached HEAD' state. You can look around, make experimental
   changes and commit them, and you can discard any commits you make in this
   state without impacting any branches by performing another checkout./

+ In order to continue making Commits, you have to now create a a NEW branch: "git checkout -b <newbranchname>"; if you don't do this (create a new branch), any commits you make will be lost or end up in a weird state.

+ The only OTHER way to undo changes is to use the inline editor, by clicking on "Open Changes" at top right of vscode even before you stage a file ("Open Changes" will only work after you make a change and Save). You could have tried git deleting recent changes, but if you have not made any Commits; there isn't much you can do.


- IMPORTANT. WORK. BREAKTHROUGH. TROUBLESHOOT.

- Git Fetch vs Git Pull:
https://www.youtube.com/watch?v=QRydepk8TB0
+ Git Fetch is safer and less complicated than Git Pull as, I think, there is no risk of having to accept/reject changes. 


https://www.youtube.com/watch?v=q6rYglziOjM
+ Always Pull before Push, if there has been additions to Origin (fast-forwards error).
+ Don't create new branch via github.com, create it locally first.
++***** Command is: "git fetch origin", and it will download all branches you do not have locally.
++ "git diff origin/<branchname> <localbranchname>" gives you the difference then between remote and local after Fetch.
++***** "git merge origin/<branchname>" will merge the fetched differences from remote (github.com) into your working directory.
++ Git Fetch also likely gets you all branches, vs Git Pull which only gets you content of the default branch.

- https://git-scm.com/book/en/v2/Git-Branching-Basic-Branching-and-Merging
Basic Merging/:  MERGE A BRANCH INTO MAIN/
Suppose you’ve decided that your issue #53 work is complete and ready to be merged into your master branch. 
In order to do that, you’ll merge your iss53 branch into master, much like you merged your hotfix branch earlier. All 
you have to do is check out the branch you wish to merge into and then run the git merge command:

$ git checkout master
Switched to branch 'master'
$ git merge iss53
Merge made by the 'recursive' strategy.
index.html |    1 +
1 file changed, 1 insertion(+)

NOTE1: The creator of the Git REPOSITORY will have to Accept (PULL) your Merge Request at GitHub.com.

- Run the following command to amend (change) the message of the latest commit: git commit --amend -m 
"New commit message." What the command does is overwriting the most recent commit with the new one.